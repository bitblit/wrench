name: Build and Deploy Production Library

on:
  push:
    tags:
      - "release-*"

jobs:
  build-and-deploy-api:
    runs-on: ubuntu-latest
    environment: ErigirGeneral

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure environment
        uses: ./.github/workflows/actions/build-env-setup

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build, Test, Package
        run: mvn clean compile
        shell: bash

      # Decrypt the keyrings
      - name: Build, Test, Package
        run: gpg --passphrase $GPG_KEYFILE_ENCRYPT_PASSPHRASE --decrypt --output $HOME/pubring.gpg circleci/pubring.gpg.enc
        shell: bash

      - name: Build, Test, Package
        run: gpg --passphrase $GPG_KEYFILE_ENCRYPT_PASSPHRASE --decrypt --output $HOME/secring.gpg circleci/secring.gpg.enc
        shell: bash

      - name: Using upload target
        run: echo ${GITHUB_REF_NAME:8}+$GITHUB_RUN_NUMBER
        shell: bash

        # Filter the pom files to actually have the version number in it
      - name: Build, Test, Package
        run: find . -type f -regex ".*/pom\.xml" -exec sed -i.bak s/LOCAL-SNAPSHOT/${GITHUB_REF_NAME:8}+$GITHUB_RUN_NUMBER/ {} \;
        shell: bash

      - name: Build, Test, Package
        run: find . -type f -regex ".*/latest-release-link-template\.html" -exec sed -i.bak s/LOCAL-SNAPSHOT/${GITHUB_REF_NAME:8}+$GITHUB_RUN_NUMBER/ {} \;
        shell: bash

        # Update documentation
      - name: Build, Test, Package
        run: mvn site -P reporting -Dgpg.passphrase=$GPG_PASSPHRASE -Dgpg.keyname=$GPG_KEYNAME -Dgpg.homedir=$HOME
        shell: bash

      - name: Build, Test, Package
        run: bash src/automate-build/sendDocsToS3.sh s3://www.erigir.com/open-source/docs/wrench/${GITHUB_REF_NAME:8}+$GITHUB_RUN_NUMBER
        shell: bash

      - name: Build, Test, Package
        run: aws s3 cp src/automate-build/latest-release-link-template.html s3://www.erigir.com/open-source/docs/wrench/index.html
        shell: bash

        # - aws s3 cp target/site s3://www.erigir.com/open-source/docs/wrench/$CIRCLE_BUILD_NUM --recursive
        # This is actually significantly easier than trying to use the maven release plugin when you wont be pushing to master,
        # and when the tagging has already happened
        # Build and upload
      - name: Build, Test, Package
        run: mvn --settings circleci/build_server_maven_settings.xml -Dgpg.passphrase=$GPG_PASSPHRASE -Dgpg.keyname=$GPG_KEYNAME -Dgpg.homedir=$HOME -DskipTests javadoc:jar source:jar deploy
        shell: bash

      - name: Build, Test, Package
        run: rm $HOME/pubring.gpg
        shell: bash

      - name: Build, Test, Package
        run: rm $HOME/secring.gpg
        shell: bash

      # Will add this later once I figure out how on circleCI
      # - mvn -s build_server_maven_settings.xml site:site
      # - git checkout gh-pages
      # - cp -R target/site/* .
      # - git add .
      # - git config --global user.email "build@erigir.com"
      # - git config --global user.name "CircleCI Build Server (Push by $CIRCLE_USERNAME)"
      # - git commit -a -m "Updating documentation"
      # - git push origin gh-pages

      - name: Save coverage reports
        uses: ./.github/workflows/actions/test-report

machine:
  java:
    version:
      oraclejdk8


dependencies:
 override: 
  - mvn --fail-never dependency:go-offline || true

test:
 post:
  - mkdir -p $CIRCLE_TEST_REPORTS/junit/
  - find . -type f -regex ".*/target/.*-reports/.*xml" -exec cp {} $CIRCLE_TEST_REPORTS/junit/ \;

# Using this means that it'll only deploy to artifactory if a release tag is pushed
deployment:
 release:
   tag: /release-.*/
   commands:
   # Decrypt the keyrings
   - gpg --passphrase $GPG_KEYFILE_ENCRYPT_PASSPHRASE --decrypt --output $HOME/pubring.gpg circleci/pubring.gpg.enc
   - gpg --passphrase $GPG_KEYFILE_ENCRYPT_PASSPHRASE --decrypt --output $HOME/secring.gpg circleci/secring.gpg.enc
   # Filter the pom files to actually have the version number in it
   - find . -type f -regex ".*/pom\.xml" -exec sed -i.bak s/LOCAL-SNAPSHOT/${CIRCLE_TAG:8}+$BUILD_NUMBER/ {} \;
   # This is actually significantly easier than trying to use the maven release plugin when you wont be pushing to master,
   # and when the tagging has already happened
   # Build and upload
   - mvn --settings circleci/build_server_maven_settings.xml -Dgpg.passphrase=$GPG_PASSPHRASE -Dgpg.keyname=$GPG_KEYNAME -Dgpg.homedir=$HOME -DskipTests javadoc:jar source:jar deploy
   - rm $HOME/pubring.gpg
   - rm $HOME/secring.gpg
   # Will add this later once I figure out how on circleCI
   # - mvn -s build_server_maven_settings.xml site:site
   # - git checkout gh-pages
   # - cp -R target/site/* .
   # - git add .
   # - git config --global user.email "build@erigir.com"
   # - git config --global user.name "CircleCI Build Server (Push by $CIRCLE_USERNAME)"
   # - git commit -a -m "Updating documentation"
   # - git push origin gh-pages